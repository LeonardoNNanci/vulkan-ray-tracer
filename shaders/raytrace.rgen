#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable

#include "raycommon.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 4) buffer _buff { float rgbBuffer[]; };

layout(push_constant) uniform constants {
    mat4 proj;
    mat4 projInv;
    mat4 view;
    mat4 viewInv;
};

void main() 
{
    const ivec2 originalCenter = ivec2(gl_LaunchIDEXT.xy);
    // const ivec2 imageCenter = ivec2(gl_LaunchSizeEXT.xy) / 2;
    // const float distance = length(originalCenter - imageCenter);
    // const int k = 2;
    // const float radii = 100.;
    // const int exp = int(distance / radii);
    // float ki = pow(float(k), float(exp));
    //debugPrintfEXT("%f\n", ki);

    //vec2 mod = vec2(originalCenter % int(ki));
    vec2 pixelCenter = vec2(originalCenter);// - mod + ki*vec2(0.5);
    // debugPrintfEXT("%v2i %% %d = %v2f\n", originalCenter, int(ki), mod);
    

    //-----------------------------------------------------------
    //const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = viewInv * vec4(0, 0, 0, 1);
    vec4 target    = projInv * vec4(d.x, d.y, 1, 1);
    vec4 direction = viewInv * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.00001;
    float tMax     = 10000.0;

    prd.done = false;
    prd.rayOrigin = origin.xyz;
    prd.rayDirection = direction.xyz;
    prd.hitValue = vec3(0.);
    prd.depth = 0;
    vec3 finalColor = vec3(0.);

    uint maxDepth = 32;
    while(prd.depth < maxDepth && !prd.done){
        traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            prd.rayOrigin,  // ray origin
            tMin,           // ray min range
            prd.rayDirection,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );
        prd.depth++;
        prd.rayDirection.z += .9;
    }
    if(!prd.done)
        prd.hitValue = vec3(0., 0., 0.);
    uint linear = gl_LaunchIDEXT.y * gl_LaunchSizeEXT .x * 3 + gl_LaunchIDEXT.x * 3;

    rgbBuffer[linear] = prd.hitValue.r;
    rgbBuffer[linear + 1] = prd.hitValue.g;
    rgbBuffer[linear + 2] = prd.hitValue.b;
}
